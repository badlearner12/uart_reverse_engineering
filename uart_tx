----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 23.03.2025 20:43:31
-- Design Name: 
-- Module Name: uart_tx - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity uart_tx is
    generic(
        clk_frequency : integer := 125_000_000  ;
        baud_rate     : integer := 115_200      
    );
    Port ( 
           clk : in STD_LOGIC;
           reset : in STD_LOGIC;
           tx_start : in STD_LOGIC;
           tx_data : in std_logic_vector (7 downto 0);
           tx_serial_out : out std_logic
    );
end uart_tx;
    
architecture Behavioral of uart_tx is
    constant baud_dvsr : integer := clk_frequency / baud_rate; -- bit rate dibagi 16 --
    type tx_state_type is (idle, start, data, stop);
    
    signal tx_state : tx_state_type := idle;
    signal tx_baud_cnt : integer range 0 to baud_dvsr - 1 ;
    signal tx_baud_tick : std_logic := '0';
    signal rx_bit_index : integer range 0 to 7 := 0;
    signal rx_data_reg  : std_logic_vector (7 downto 0) := (others => '0');
    signal serial_tx    : std_logic := '1';
    
begin
    tx_serial_out <= serial_tx ;
    
    -- baud rate generator --
    baud_generator : process (clk, reset)    
    begin
        if reset = '1' then
            tx_baud_cnt <= 0;
            tx_baud_tick <= '0';
        elsif rising_edge(clk) then
            if tx_state /= idle then
                if tx_baud_cnt = baud_dvsr-1 then
                    tx_baud_cnt <= 0;
                    tx_baud_tick <= '1';
                else
                    tx_baud_cnt <= tx_baud_cnt + 1 ;
                    tx_baud_tick <= '0';
                end if ;
            else         
                tx_baud_cnt <= 0;
                tx_baud_tick <= '0';
            end if;
        end if;                        
    end process;
    
    -- tx fsm --
    fsm : process(clk, reset)
    begin
        if reset = '1' then 
            tx_state <= idle;
            serial_tx <= '1';
            rx_data_reg <= (others => '0');                
            rx_bit_index <= 0;        
        
        elsif rising_edge(clk) then
            case tx_state is
                when idle =>
                    serial_tx <= '1';
                    rx_bit_index <= 0;
                if tx_start = '1' then
                    tx_state <= start;
                    rx_data_reg <= tx_data;
                end if;
                
                when start =>
                    serial_tx <= '0';
                    if tx_baud_tick = '1' then
                        tx_state <= data;
                        rx_bit_index <= 0;
                    end if;
                        
                when data =>
                    serial_tx <= rx_data_reg(rx_bit_index);
                    if tx_baud_tick = '1' then
                        if rx_bit_index = 7 then 
                            tx_state <= stop;
                        else
                            rx_bit_index <= rx_bit_index + 1;
                        end if ;
                    end if;
                            
                when stop =>
                    serial_tx <= '1';
                    if tx_baud_tick = '1' then
                        tx_state <= idle;
                    end if;
                end case;
        end if ;
    end process;
                                    
end Behavioral;
